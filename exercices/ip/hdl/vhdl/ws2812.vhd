-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ws2812 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    y_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of ws2812 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ws2812,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.878000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1470,HLS_SYN_LUT=694}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv13_1388 : STD_LOGIC_VECTOR (12 downto 0) := "1001110001000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_V_data_V_0_data_out : STD_LOGIC_VECTOR (255 downto 0);
    signal A_V_data_V_0_vld_in : STD_LOGIC;
    signal A_V_data_V_0_vld_out : STD_LOGIC;
    signal A_V_data_V_0_ack_in : STD_LOGIC;
    signal A_V_data_V_0_ack_out : STD_LOGIC;
    signal A_V_data_V_0_payload_A : STD_LOGIC_VECTOR (255 downto 0);
    signal A_V_data_V_0_payload_B : STD_LOGIC_VECTOR (255 downto 0);
    signal A_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal A_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal A_V_data_V_0_sel : STD_LOGIC;
    signal A_V_data_V_0_load_A : STD_LOGIC;
    signal A_V_data_V_0_load_B : STD_LOGIC;
    signal A_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal A_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_last_V_0_vld_in : STD_LOGIC;
    signal A_V_last_V_0_vld_out : STD_LOGIC;
    signal A_V_last_V_0_ack_in : STD_LOGIC;
    signal A_V_last_V_0_ack_out : STD_LOGIC;
    signal A_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal A_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal A_V_last_V_0_sel : STD_LOGIC;
    signal A_V_last_V_0_load_A : STD_LOGIC;
    signal A_V_last_V_0_load_B : STD_LOGIC;
    signal A_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal A_V_dest_V_0_vld_in : STD_LOGIC;
    signal A_V_dest_V_0_ack_out : STD_LOGIC;
    signal A_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal cont_col : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    signal A_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_last_V_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_197_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_323 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal led_V_fu_241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal led_V_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal columna_V_3_fu_249_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal columna_V_3_reg_333 : STD_LOGIC_VECTOR (255 downto 0);
    signal j_1_fu_275_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_341 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bit_V_fu_291_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_V_reg_346 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_305_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_ctrl_bit_fu_172_ap_start : STD_LOGIC;
    signal grp_ctrl_bit_fu_172_ap_done : STD_LOGIC;
    signal grp_ctrl_bit_fu_172_ap_idle : STD_LOGIC;
    signal grp_ctrl_bit_fu_172_ap_ready : STD_LOGIC;
    signal grp_ctrl_bit_fu_172_y_V : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_ctrl_bit_fu_172_y_V_ap_vld : STD_LOGIC;
    signal p_Val2_s_reg_130 : STD_LOGIC_VECTOR (255 downto 0);
    signal i_reg_139 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_150 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_i_reg_161 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_i_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_grp_ctrl_bit_fu_172_ap_start : STD_LOGIC := '0';
    signal cont_col_assign_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_2_fu_227_p4 : STD_LOGIC_VECTOR (223 downto 0);
    signal tmp_fu_203_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_207_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_1_fu_237_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_fu_217_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal bvh_d_index_fu_281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_assign_cast_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component ctrl_bit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        y_V_ap_vld : OUT STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_ctrl_bit_fu_172 : component ctrl_bit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_ctrl_bit_fu_172_ap_start,
        ap_done => grp_ctrl_bit_fu_172_ap_done,
        ap_idle => grp_ctrl_bit_fu_172_ap_idle,
        ap_ready => grp_ctrl_bit_fu_172_ap_ready,
        y_V => grp_ctrl_bit_fu_172_y_V,
        y_V_ap_vld => grp_ctrl_bit_fu_172_y_V_ap_vld,
        x_V => bit_V_reg_346);





    A_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_V_data_V_0_ack_out) and (ap_const_logic_1 = A_V_data_V_0_vld_out))) then 
                                        A_V_data_V_0_sel_rd <= not(A_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_V_data_V_0_vld_in) and (ap_const_logic_1 = A_V_data_V_0_ack_in))) then 
                                        A_V_data_V_0_sel_wr <= not(A_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = A_V_data_V_0_vld_in) and (ap_const_logic_1 = A_V_data_V_0_ack_out) and (A_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = A_V_data_V_0_vld_in) and (A_V_data_V_0_state = ap_const_lv2_2)))) then 
                    A_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = A_V_data_V_0_vld_in) and (ap_const_logic_0 = A_V_data_V_0_ack_out) and (A_V_data_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = A_V_data_V_0_ack_out) and (A_V_data_V_0_state = ap_const_lv2_1)))) then 
                    A_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = A_V_data_V_0_vld_in) and (A_V_data_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = A_V_data_V_0_ack_out) and (A_V_data_V_0_state = ap_const_lv2_1)) or ((A_V_data_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = A_V_data_V_0_vld_in) and (ap_const_logic_0 = A_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = A_V_data_V_0_vld_in) and (ap_const_logic_1 = A_V_data_V_0_ack_out)))))) then 
                    A_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    A_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = A_V_dest_V_0_vld_in) and (ap_const_logic_1 = A_V_dest_V_0_ack_out) and (ap_const_lv2_3 = A_V_dest_V_0_state)) or ((ap_const_logic_0 = A_V_dest_V_0_vld_in) and (ap_const_lv2_2 = A_V_dest_V_0_state)))) then 
                    A_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = A_V_dest_V_0_vld_in) and (ap_const_logic_0 = A_V_dest_V_0_ack_out) and (ap_const_lv2_3 = A_V_dest_V_0_state)) or ((ap_const_logic_0 = A_V_dest_V_0_ack_out) and (ap_const_lv2_1 = A_V_dest_V_0_state)))) then 
                    A_V_dest_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = A_V_dest_V_0_vld_in) and (ap_const_lv2_2 = A_V_dest_V_0_state)) or ((ap_const_logic_1 = A_V_dest_V_0_ack_out) and (ap_const_lv2_1 = A_V_dest_V_0_state)) or ((ap_const_lv2_3 = A_V_dest_V_0_state) and not(((ap_const_logic_1 = A_V_dest_V_0_vld_in) and (ap_const_logic_0 = A_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = A_V_dest_V_0_vld_in) and (ap_const_logic_1 = A_V_dest_V_0_ack_out)))))) then 
                    A_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    A_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_V_last_V_0_ack_out) and (ap_const_logic_1 = A_V_last_V_0_vld_out))) then 
                                        A_V_last_V_0_sel_rd <= not(A_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_V_last_V_0_vld_in) and (ap_const_logic_1 = A_V_last_V_0_ack_in))) then 
                                        A_V_last_V_0_sel_wr <= not(A_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = A_V_last_V_0_vld_in) and (ap_const_logic_1 = A_V_last_V_0_ack_out) and (ap_const_lv2_3 = A_V_last_V_0_state)) or ((ap_const_logic_0 = A_V_last_V_0_vld_in) and (ap_const_lv2_2 = A_V_last_V_0_state)))) then 
                    A_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = A_V_last_V_0_vld_in) and (ap_const_logic_0 = A_V_last_V_0_ack_out) and (ap_const_lv2_3 = A_V_last_V_0_state)) or ((ap_const_logic_0 = A_V_last_V_0_ack_out) and (ap_const_lv2_1 = A_V_last_V_0_state)))) then 
                    A_V_last_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = A_V_last_V_0_vld_in) and (ap_const_lv2_2 = A_V_last_V_0_state)) or ((ap_const_logic_1 = A_V_last_V_0_ack_out) and (ap_const_lv2_1 = A_V_last_V_0_state)) or ((ap_const_lv2_3 = A_V_last_V_0_state) and not(((ap_const_logic_1 = A_V_last_V_0_vld_in) and (ap_const_logic_0 = A_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = A_V_last_V_0_vld_in) and (ap_const_logic_1 = A_V_last_V_0_ack_out)))))) then 
                    A_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    A_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_ctrl_bit_fu_172_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_ctrl_bit_fu_172_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_269_p2))) then 
                    ap_reg_grp_ctrl_bit_fu_172_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_ctrl_bit_fu_172_ap_ready)) then 
                    ap_reg_grp_ctrl_bit_fu_172_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond1_fu_191_p2) and (ap_const_lv1_1 = tmp_last_V_reg_316))) then 
                i_i_reg_161 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_i_fu_299_p2))) then 
                i_i_reg_161 <= i_2_fu_305_p2;
            end if; 
        end if;
    end process;

    i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_269_p2))) then 
                i_reg_139 <= i_1_reg_323;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (A_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_139 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_ctrl_bit_fu_172_ap_done = ap_const_logic_1))) then 
                j_reg_150 <= j_1_reg_341;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_191_p2))) then 
                j_reg_150 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_269_p2))) then 
                p_Val2_s_reg_130 <= columna_V_3_reg_333;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (A_V_data_V_0_vld_out = ap_const_logic_1))) then 
                p_Val2_s_reg_130 <= A_V_data_V_0_data_out;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_V_data_V_0_load_A)) then
                A_V_data_V_0_payload_A <= A_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_V_data_V_0_load_B)) then
                A_V_data_V_0_payload_B <= A_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_V_last_V_0_load_A)) then
                A_V_last_V_0_payload_A <= A_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_V_last_V_0_load_B)) then
                A_V_last_V_0_payload_B <= A_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond_fu_269_p2))) then
                bit_V_reg_346 <= bit_V_fu_291_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond1_fu_191_p2))) then
                columna_V_3_reg_333 <= columna_V_3_fu_249_p3;
                led_V_reg_328 <= led_V_fu_241_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond1_fu_191_p2))) then
                cont_col <= cont_col_assign_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_323 <= i_1_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_1_reg_341 <= j_1_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (A_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_last_V_reg_316 <= A_V_last_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, A_V_data_V_0_vld_out, ap_CS_fsm_state2, tmp_last_V_reg_316, ap_CS_fsm_state3, exitcond1_fu_191_p2, ap_CS_fsm_state4, exitcond_fu_269_p2, ap_CS_fsm_state6, grp_ctrl_bit_fu_172_ap_done, ap_CS_fsm_state5, exitcond_i_fu_299_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (A_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond1_fu_191_p2) and (ap_const_lv1_1 = tmp_last_V_reg_316))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond1_fu_191_p2) and (ap_const_lv1_0 = tmp_last_V_reg_316))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond_fu_269_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_ctrl_bit_fu_172_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_i_fu_299_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    A_TDATA_blk_n_assign_proc : process(A_V_data_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_TDATA_blk_n <= A_V_data_V_0_state(0);
        else 
            A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    A_TREADY <= A_V_dest_V_0_state(1);
    A_V_data_V_0_ack_in <= A_V_data_V_0_state(1);

    A_V_data_V_0_ack_out_assign_proc : process(A_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (A_V_data_V_0_vld_out = ap_const_logic_1))) then 
            A_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            A_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_V_data_V_0_data_out_assign_proc : process(A_V_data_V_0_payload_A, A_V_data_V_0_payload_B, A_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_V_data_V_0_sel)) then 
            A_V_data_V_0_data_out <= A_V_data_V_0_payload_B;
        else 
            A_V_data_V_0_data_out <= A_V_data_V_0_payload_A;
        end if; 
    end process;

    A_V_data_V_0_load_A <= (A_V_data_V_0_state_cmp_full and not(A_V_data_V_0_sel_wr));
    A_V_data_V_0_load_B <= (A_V_data_V_0_sel_wr and A_V_data_V_0_state_cmp_full);
    A_V_data_V_0_sel <= A_V_data_V_0_sel_rd;
    A_V_data_V_0_state_cmp_full <= '0' when (A_V_data_V_0_state = ap_const_lv2_1) else '1';
    A_V_data_V_0_vld_in <= A_TVALID;
    A_V_data_V_0_vld_out <= A_V_data_V_0_state(0);

    A_V_dest_V_0_ack_out_assign_proc : process(A_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (A_V_data_V_0_vld_out = ap_const_logic_1))) then 
            A_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            A_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    A_V_dest_V_0_vld_in <= A_TVALID;
    A_V_last_V_0_ack_in <= A_V_last_V_0_state(1);

    A_V_last_V_0_ack_out_assign_proc : process(A_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (A_V_data_V_0_vld_out = ap_const_logic_1))) then 
            A_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            A_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_V_last_V_0_data_out_assign_proc : process(A_V_last_V_0_payload_A, A_V_last_V_0_payload_B, A_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_V_last_V_0_sel)) then 
            A_V_last_V_0_data_out <= A_V_last_V_0_payload_B;
        else 
            A_V_last_V_0_data_out <= A_V_last_V_0_payload_A;
        end if; 
    end process;

    A_V_last_V_0_load_A <= (A_V_last_V_0_state_cmp_full and not(A_V_last_V_0_sel_wr));
    A_V_last_V_0_load_B <= (A_V_last_V_0_sel_wr and A_V_last_V_0_state_cmp_full);
    A_V_last_V_0_sel <= A_V_last_V_0_sel_rd;
    A_V_last_V_0_state_cmp_full <= '0' when (A_V_last_V_0_state = ap_const_lv2_1) else '1';
    A_V_last_V_0_vld_in <= A_TVALID;
    A_V_last_V_0_vld_out <= A_V_last_V_0_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state6, exitcond_i_fu_299_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_i_fu_299_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, exitcond_i_fu_299_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond_i_fu_299_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bit_V_fu_291_p3 <= led_V_reg_328(to_integer(unsigned(index_assign_cast_fu_287_p1)) downto to_integer(unsigned(index_assign_cast_fu_287_p1))) when (to_integer(unsigned(index_assign_cast_fu_287_p1))>= 0 and to_integer(unsigned(index_assign_cast_fu_287_p1))<=31) else "-";
    bvh_d_index_fu_281_p2 <= std_logic_vector(signed(ap_const_lv5_17) - signed(j_reg_150));
    columna_V_3_fu_249_p3 <= 
        r_V_1_fu_237_p1 when (tmp_fu_203_p1(0) = '1') else 
        r_V_fu_217_p2;
    cont_col_assign_fu_257_p2 <= std_logic_vector(unsigned(cont_col) + unsigned(ap_const_lv32_1));
    exitcond1_fu_191_p2 <= "1" when (i_reg_139 = ap_const_lv4_8) else "0";
    exitcond_fu_269_p2 <= "1" when (j_reg_150 = ap_const_lv5_18) else "0";
    exitcond_i_fu_299_p2 <= "1" when (i_i_reg_161 = ap_const_lv13_1388) else "0";
    grp_ctrl_bit_fu_172_ap_start <= ap_reg_grp_ctrl_bit_fu_172_ap_start;
    i_1_fu_197_p2 <= std_logic_vector(unsigned(i_reg_139) + unsigned(ap_const_lv4_1));
    i_2_fu_305_p2 <= std_logic_vector(unsigned(i_i_reg_161) + unsigned(ap_const_lv13_1));
    index_assign_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bvh_d_index_fu_281_p2),32));
    j_1_fu_275_p2 <= std_logic_vector(unsigned(j_reg_150) + unsigned(ap_const_lv5_1));
    led_V_fu_241_p3 <= 
        tmp_4_fu_223_p1 when (tmp_fu_203_p1(0) = '1') else 
        p_Result_4_fu_207_p4;
    p_Result_4_fu_207_p4 <= p_Val2_s_reg_130(255 downto 224);
    r_V_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_227_p4),256));
    r_V_2_fu_227_p4 <= p_Val2_s_reg_130(255 downto 32);
    r_V_fu_217_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_s_reg_130),to_integer(unsigned('0' & ap_const_lv256_lc_1(31-1 downto 0)))));
    tmp_4_fu_223_p1 <= p_Val2_s_reg_130(32 - 1 downto 0);
    tmp_fu_203_p1 <= cont_col(1 - 1 downto 0);

    y_V_assign_proc : process(ap_CS_fsm_state6, grp_ctrl_bit_fu_172_y_V, grp_ctrl_bit_fu_172_y_V_ap_vld, ap_CS_fsm_state5, exitcond_i_fu_299_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_i_fu_299_p2))) then 
            y_V <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_1 = grp_ctrl_bit_fu_172_y_V_ap_vld))) then 
            y_V <= grp_ctrl_bit_fu_172_y_V;
        else 
            y_V <= "X";
        end if; 
    end process;

end behav;
