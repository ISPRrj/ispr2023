-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ctrl_bit is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_V_ap_vld : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of ctrl_bit is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_55 : STD_LOGIC_VECTOR (6 downto 0) := "1010101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_V_read_read_fu_40_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_105_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_7_fu_117_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_6_fu_129_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_fu_141_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_2_reg_55 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_66 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_77 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond4_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_88 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_fu_135_p2))) then 
                i_1_reg_77 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (x_V_read_read_fu_40_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond4_fu_123_p2))) then 
                i_1_reg_77 <= i_6_fu_129_p2;
            end if; 
        end if;
    end process;

    i_2_reg_55_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (x_V_read_read_fu_40_p2 = ap_const_lv1_0))) then 
                i_2_reg_55 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond3_fu_99_p2))) then 
                i_2_reg_55 <= i_5_fu_105_p2;
            end if; 
        end if;
    end process;

    i_3_reg_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond3_fu_99_p2))) then 
                i_3_reg_66 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (x_V_read_read_fu_40_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_111_p2))) then 
                i_3_reg_66 <= i_7_fu_117_p2;
            end if; 
        end if;
    end process;

    i_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (x_V_read_read_fu_40_p2 = ap_const_lv1_1))) then 
                i_reg_88 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_135_p2))) then 
                i_reg_88 <= i_4_fu_141_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, x_V_read_read_fu_40_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond3_fu_99_p2, exitcond_fu_111_p2, exitcond4_fu_123_p2, exitcond2_fu_135_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (x_V_read_read_fu_40_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (x_V_read_read_fu_40_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond3_fu_99_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((x_V_read_read_fu_40_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = exitcond_fu_111_p2)) or ((x_V_read_read_fu_40_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond4_fu_123_p2))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond2_fu_135_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, x_V_read_read_fu_40_p2, ap_CS_fsm_state3, exitcond_fu_111_p2, exitcond4_fu_123_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (((x_V_read_read_fu_40_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = exitcond_fu_111_p2)) or ((x_V_read_read_fu_40_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond4_fu_123_p2)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(x_V_read_read_fu_40_p2, ap_CS_fsm_state3, exitcond_fu_111_p2, exitcond4_fu_123_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((x_V_read_read_fu_40_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = exitcond_fu_111_p2)) or ((x_V_read_read_fu_40_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = exitcond4_fu_123_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_135_p2 <= "1" when (i_reg_88 = ap_const_lv7_55) else "0";
    exitcond3_fu_99_p2 <= "1" when (i_2_reg_55 = ap_const_lv6_28) else "0";
    exitcond4_fu_123_p2 <= "1" when (i_1_reg_77 = ap_const_lv6_28) else "0";
    exitcond_fu_111_p2 <= "1" when (i_3_reg_66 = ap_const_lv7_55) else "0";
    i_4_fu_141_p2 <= std_logic_vector(unsigned(i_reg_88) + unsigned(ap_const_lv7_1));
    i_5_fu_105_p2 <= std_logic_vector(unsigned(i_2_reg_55) + unsigned(ap_const_lv6_1));
    i_6_fu_129_p2 <= std_logic_vector(unsigned(i_1_reg_77) + unsigned(ap_const_lv6_1));
    i_7_fu_117_p2 <= std_logic_vector(unsigned(i_3_reg_66) + unsigned(ap_const_lv7_1));
    x_V_read_read_fu_40_p2 <= x_V;

    y_V_assign_proc : process(x_V_read_read_fu_40_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond3_fu_99_p2, exitcond_fu_111_p2, exitcond4_fu_123_p2, exitcond2_fu_135_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (x_V_read_read_fu_40_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_111_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (x_V_read_read_fu_40_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond4_fu_123_p2)))) then 
            y_V <= ap_const_lv1_0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond3_fu_99_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_135_p2)))) then 
            y_V <= ap_const_lv1_1;
        else 
            y_V <= "X";
        end if; 
    end process;


    y_V_ap_vld_assign_proc : process(x_V_read_read_fu_40_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond3_fu_99_p2, exitcond_fu_111_p2, exitcond4_fu_123_p2, exitcond2_fu_135_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond3_fu_99_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (x_V_read_read_fu_40_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = exitcond_fu_111_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (x_V_read_read_fu_40_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = exitcond4_fu_123_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond2_fu_135_p2)))) then 
            y_V_ap_vld <= ap_const_logic_1;
        else 
            y_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
