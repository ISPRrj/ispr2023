// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ctrl_bit (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_V,
        y_V_ap_vld,
        x_V
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] y_V;
output   y_V_ap_vld;
input  [0:0] x_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] y_V;
reg y_V_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] x_V_read_read_fu_40_p2;
wire   [5:0] i_5_fu_105_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] i_7_fu_117_p2;
wire    ap_CS_fsm_state3;
wire   [5:0] i_6_fu_129_p2;
wire   [6:0] i_4_fu_141_p2;
wire    ap_CS_fsm_state4;
reg   [5:0] i_2_reg_55;
wire   [0:0] exitcond3_fu_99_p2;
reg   [6:0] i_3_reg_66;
wire   [0:0] exitcond_fu_111_p2;
reg   [5:0] i_1_reg_77;
wire   [0:0] exitcond4_fu_123_p2;
wire   [0:0] exitcond2_fu_135_p2;
reg   [6:0] i_reg_88;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond2_fu_135_p2))) begin
        i_1_reg_77 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (x_V_read_read_fu_40_p2 == 1'd1) & (1'd0 == exitcond4_fu_123_p2))) begin
        i_1_reg_77 <= i_6_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (x_V_read_read_fu_40_p2 == 1'd0))) begin
        i_2_reg_55 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond3_fu_99_p2))) begin
        i_2_reg_55 <= i_5_fu_105_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond3_fu_99_p2))) begin
        i_3_reg_66 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (x_V_read_read_fu_40_p2 == 1'd0) & (1'd0 == exitcond_fu_111_p2))) begin
        i_3_reg_66 <= i_7_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (x_V_read_read_fu_40_p2 == 1'd1))) begin
        i_reg_88 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_135_p2))) begin
        i_reg_88 <= i_4_fu_141_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (((x_V_read_read_fu_40_p2 == 1'd0) & (1'd1 == exitcond_fu_111_p2)) | ((x_V_read_read_fu_40_p2 == 1'd1) & (1'd1 == exitcond4_fu_123_p2)))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (((x_V_read_read_fu_40_p2 == 1'd0) & (1'd1 == exitcond_fu_111_p2)) | ((x_V_read_read_fu_40_p2 == 1'd1) & (1'd1 == exitcond4_fu_123_p2))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (x_V_read_read_fu_40_p2 == 1'd0) & (1'd0 == exitcond_fu_111_p2)) | ((1'b1 == ap_CS_fsm_state3) & (x_V_read_read_fu_40_p2 == 1'd1) & (1'd0 == exitcond4_fu_123_p2)))) begin
        y_V = 1'd0;
    end else if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond3_fu_99_p2)) | ((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_135_p2)))) begin
        y_V = 1'd1;
    end else begin
        y_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond3_fu_99_p2)) | ((1'b1 == ap_CS_fsm_state3) & (x_V_read_read_fu_40_p2 == 1'd0) & (1'd0 == exitcond_fu_111_p2)) | ((1'b1 == ap_CS_fsm_state3) & (x_V_read_read_fu_40_p2 == 1'd1) & (1'd0 == exitcond4_fu_123_p2)) | ((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond2_fu_135_p2)))) begin
        y_V_ap_vld = 1'b1;
    end else begin
        y_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (x_V_read_read_fu_40_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (x_V_read_read_fu_40_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond3_fu_99_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (((x_V_read_read_fu_40_p2 == 1'd0) & (1'd1 == exitcond_fu_111_p2)) | ((x_V_read_read_fu_40_p2 == 1'd1) & (1'd1 == exitcond4_fu_123_p2))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond2_fu_135_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign exitcond2_fu_135_p2 = ((i_reg_88 == 7'd85) ? 1'b1 : 1'b0);

assign exitcond3_fu_99_p2 = ((i_2_reg_55 == 6'd40) ? 1'b1 : 1'b0);

assign exitcond4_fu_123_p2 = ((i_1_reg_77 == 6'd40) ? 1'b1 : 1'b0);

assign exitcond_fu_111_p2 = ((i_3_reg_66 == 7'd85) ? 1'b1 : 1'b0);

assign i_4_fu_141_p2 = (i_reg_88 + 7'd1);

assign i_5_fu_105_p2 = (i_2_reg_55 + 6'd1);

assign i_6_fu_129_p2 = (i_1_reg_77 + 6'd1);

assign i_7_fu_117_p2 = (i_3_reg_66 + 7'd1);

assign x_V_read_read_fu_40_p2 = x_V;

endmodule //ctrl_bit
